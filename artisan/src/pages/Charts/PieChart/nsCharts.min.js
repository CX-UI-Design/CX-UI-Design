!(function(e, t) {
  'object' == typeof exports && 'object' == typeof module
    ? (module.exports = t(require('echarts')))
    : 'function' == typeof define && define.amd
    ? define('nsCharts', ['echarts'], t)
    : 'object' == typeof exports
    ? (exports.nsCharts = t(require('echarts')))
    : (e.nsCharts = t(e.echarts));
})(window, function(e) {
  return (function(e) {
    var t = {};

    function o(r) {
      if (t[r]) return t[r].exports;
      var i = (t[r] = { i: r, l: !1, exports: {} });
      return e[r].call(i.exports, i, i.exports, o), (i.l = !0), i.exports;
    }

    return (
      (o.m = e),
      (o.c = t),
      (o.d = function(e, t, r) {
        o.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: r });
      }),
      (o.r = function(e) {
        'undefined' != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }),
          Object.defineProperty(e, '__esModule', { value: !0 });
      }),
      (o.t = function(e, t) {
        if ((1 & t && (e = o(e)), 8 & t)) return e;
        if (4 & t && 'object' == typeof e && e && e.__esModule) return e;
        var r = Object.create(null);
        if (
          (o.r(r),
          Object.defineProperty(r, 'default', { enumerable: !0, value: e }),
          2 & t && 'string' != typeof e)
        )
          for (var i in e)
            o.d(
              r,
              i,
              function(t) {
                return e[t];
              }.bind(null, i)
            );
        return r;
      }),
      (o.n = function(e) {
        var t =
          e && e.__esModule
            ? function() {
                return e.default;
              }
            : function() {
                return e;
              };
        return o.d(t, 'a', t), t;
      }),
      (o.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      (o.p = ''),
      o((o.s = 3))
    );
  })([
    function(t, o) {
      t.exports = e;
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0), (t.default = void 0);
      t.default = {
        padding: [11, 16],
        width: 159,
        height: 64,
        backgroundColor: '#fff',
        borderWidth: 1,
        borderColor: '#e5e5e5',
        extraCssText: 'box-shadow: 0 3px 6px 0 rgba(0,0,0,0.24);',
        textStyle: { color: '#333', fontSize: 14 },
      };
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0), (t.default = void 0);
      var r = (function(e) {
        return e && e.__esModule ? e : { default: e };
      })(o(0));
      var i = [
        {
          normal: {
            color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
              { offset: 0, color: '#1595ff' },
              {
                offset: 1,
                color: '#8c53ca',
              },
            ]),
          },
        },
        {
          normal: {
            color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
              { offset: 0, color: '#ffa87a' },
              {
                offset: 1,
                color: '#ff6161',
              },
            ]),
          },
        },
        {
          normal: {
            color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
              { offset: 0, color: '#a5ec27' },
              {
                offset: 1,
                color: '#4ed552',
              },
            ]),
          },
        },
        {
          normal: {
            color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
              { offset: 0, color: '#11d6cb' },
              { offset: 1, color: '#23c8c4' },
            ]),
          },
        },
      ];
      t.default = i;
    },
    function(e, t, o) {
      'use strict';
      (function(e) {
        (t.__esModule = !0), (t.default = t.install = t.version = void 0);
        var r = p(o(5)),
          i = p(o(6));
        t.pieChart = i.default;
        var a = p(o(7));
        t.simplePieChart = a.default;
        var l = p(o(9));
        t.labelLinePieChart = l.default;
        var n = p(o(10));
        t.columnChart = n.default;
        var c = p(o(11));
        t.stackedBarChart = c.default;
        var s = p(o(12));
        t.barChart = s.default;
        var d = p(o(13));
        t.ganttChart = d.default;
        var u = p(o(14));
        t.lineChart = u.default;
        var f = p(o(15));
        t.barLineChart = f.default;
        var g = p(o(16));

        function p(e) {
          return e && e.__esModule ? e : { default: e };
        }

        t.barDoubleLineChart = g.default;
        var m = o(17),
          h = e.env.VERSION || m.version;
        t.version = h;
        var x = function(e) {
          e.registerTheme('customed', r.default);
        };
        t.install = x;
        var b = {
          version: h,
          install: x,
          pieChart: i.default,
          simplePieChart: a.default,
          labelLinePieChart: l.default,
          columnChart: n.default,
          stackedBarChart: c.default,
          barChart: s.default,
          ganttChart: d.default,
          lineChart: u.default,
          barLineChart: f.default,
          barDoubleLineChart: g.default,
        };
        t.default = b;
      }.call(this, o(4)));
    },
    function(e, t) {
      var o,
        r,
        i = (e.exports = {});

      function a() {
        throw new Error('setTimeout has not been defined');
      }

      function l() {
        throw new Error('clearTimeout has not been defined');
      }

      function n(e) {
        if (o === setTimeout) return setTimeout(e, 0);
        if ((o === a || !o) && setTimeout) return (o = setTimeout), setTimeout(e, 0);
        try {
          return o(e, 0);
        } catch (t) {
          try {
            return o.call(null, e, 0);
          } catch (t) {
            return o.call(this, e, 0);
          }
        }
      }

      !(function() {
        try {
          o = 'function' == typeof setTimeout ? setTimeout : a;
        } catch (e) {
          o = a;
        }
        try {
          r = 'function' == typeof clearTimeout ? clearTimeout : l;
        } catch (e) {
          r = l;
        }
      })();
      var c,
        s = [],
        d = !1,
        u = -1;

      function f() {
        d && c && ((d = !1), c.length ? (s = c.concat(s)) : (u = -1), s.length && g());
      }

      function g() {
        if (!d) {
          var e = n(f);
          d = !0;
          for (var t = s.length; t; ) {
            for (c = s, s = []; ++u < t; ) c && c[u].run();
            (u = -1), (t = s.length);
          }
          (c = null),
            (d = !1),
            (function(e) {
              if (r === clearTimeout) return clearTimeout(e);
              if ((r === l || !r) && clearTimeout) return (r = clearTimeout), clearTimeout(e);
              try {
                r(e);
              } catch (t) {
                try {
                  return r.call(null, e);
                } catch (t) {
                  return r.call(this, e);
                }
              }
            })(e);
        }
      }

      function p(e, t) {
        (this.fun = e), (this.array = t);
      }

      function m() {}

      (i.nextTick = function(e) {
        var t = new Array(arguments.length - 1);
        if (arguments.length > 1)
          for (var o = 1; o < arguments.length; o++) t[o - 1] = arguments[o];
        s.push(new p(e, t)), 1 !== s.length || d || n(g);
      }),
        (p.prototype.run = function() {
          this.fun.apply(null, this.array);
        }),
        (i.title = 'browser'),
        (i.browser = !0),
        (i.env = {}),
        (i.argv = []),
        (i.version = ''),
        (i.versions = {}),
        (i.on = m),
        (i.addListener = m),
        (i.once = m),
        (i.off = m),
        (i.removeListener = m),
        (i.removeAllListeners = m),
        (i.emit = m),
        (i.prependListener = m),
        (i.prependOnceListener = m),
        (i.listeners = function(e) {
          return [];
        }),
        (i.binding = function(e) {
          throw new Error('process.binding is not supported');
        }),
        (i.cwd = function() {
          return '/';
        }),
        (i.chdir = function(e) {
          throw new Error('process.chdir is not supported');
        }),
        (i.umask = function() {
          return 0;
        });
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0), (t.default = void 0);
      t.default = {
        color: ['#1595ff', '#00c7a0', '#f6c041', '#f66d41', '#f641ab', '#a44cf4'],
        backgroundColor: 'rgba(0, 0, 0, 0)',
        textStyle: {},
        title: { textStyle: { color: '#333' }, subtextStyle: { color: '#aaa' } },
        line: {
          itemStyle: { normal: { borderWidth: '0' } },
          lineStyle: { normal: { width: '2' } },
          symbolSize: '5',
          symbol: 'emptyCircle',
          smooth: !0,
        },
        radar: {
          itemStyle: { normal: { borderWidth: '0' } },
          lineStyle: { normal: { width: '2' } },
          symbolSize: '2',
          symbol: 'emptyCircle',
          smooth: !0,
        },
        bar: {
          itemStyle: {
            normal: { barBorderWidth: 0, barBorderColor: '#ccc' },
            emphasis: { barBorderWidth: 0, barBorderColor: '#ccc' },
          },
        },
        pie: {
          itemStyle: {
            normal: { borderWidth: 0, borderColor: '#ccc' },
            emphasis: { borderWidth: 0, borderColor: '#ccc' },
          },
        },
        scatter: {
          itemStyle: {
            normal: { borderWidth: 0, borderColor: '#ccc' },
            emphasis: { borderWidth: 0, borderColor: '#ccc' },
          },
        },
        boxplot: {
          itemStyle: {
            normal: { borderWidth: 0, borderColor: '#ccc' },
            emphasis: { borderWidth: 0, borderColor: '#ccc' },
          },
        },
        parallel: {
          itemStyle: {
            normal: { borderWidth: 0, borderColor: '#ccc' },
            emphasis: { borderWidth: 0, borderColor: '#ccc' },
          },
        },
        sankey: {
          itemStyle: {
            normal: { borderWidth: 0, borderColor: '#ccc' },
            emphasis: { borderWidth: 0, borderColor: '#ccc' },
          },
        },
        funnel: {
          itemStyle: {
            normal: { borderWidth: 0, borderColor: '#ccc' },
            emphasis: { borderWidth: 0, borderColor: '#ccc' },
          },
        },
        gauge: {
          itemStyle: {
            normal: { borderWidth: 0, borderColor: '#ccc' },
            emphasis: { borderWidth: 0, borderColor: '#ccc' },
          },
        },
        candlestick: {
          itemStyle: {
            normal: {
              color: '#c23531',
              color0: '#314656',
              borderColor: '#c23531',
              borderColor0: '#314656',
              borderWidth: 1,
            },
          },
        },
        graph: {
          itemStyle: { normal: { borderWidth: 0, borderColor: '#ccc' } },
          lineStyle: { normal: { width: 1, color: '#aaa' } },
          symbolSize: '2',
          symbol: 'emptyCircle',
          smooth: !0,
          color: ['#1595ff', '#00c7a0', '#f6c041', '#f66d41', '#f641ab', '#a44cf4'],
          label: { normal: { textStyle: { color: '#333333' } } },
        },
        map: {
          itemStyle: {
            normal: { areaColor: '#eee', borderColor: '#444', borderWidth: 0.5 },
            emphasis: { areaColor: 'rgba(255,215,0,0.8)', borderColor: '#444', borderWidth: 1 },
          },
          label: {
            normal: { textStyle: { color: '#000' } },
            emphasis: { textStyle: { color: 'rgb(100,0,0)' } },
          },
        },
        geo: {
          itemStyle: {
            normal: { areaColor: '#eee', borderColor: '#444', borderWidth: 0.5 },
            emphasis: { areaColor: 'rgba(255,215,0,0.8)', borderColor: '#444', borderWidth: 1 },
          },
          label: {
            normal: { textStyle: { color: '#000' } },
            emphasis: { textStyle: { color: 'rgb(100,0,0)' } },
          },
        },
        categoryAxis: {
          axisLine: { show: !1, lineStyle: { color: '#333' } },
          axisTick: { show: !1, lineStyle: { color: '#333' } },
          axisLabel: { show: !0, textStyle: { color: '#666666' } },
          splitLine: { show: !1, lineStyle: { color: ['#ccc'] } },
          splitArea: {
            show: !1,
            areaStyle: { color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'] },
          },
        },
        valueAxis: {
          axisLine: { show: !1, lineStyle: { color: 'red' } },
          axisTick: { show: !1, lineStyle: { color: '#333' } },
          axisLabel: { show: !0, textStyle: { color: '#999999' } },
          splitLine: { show: !0, lineStyle: { color: ['#efefef'] } },
          splitArea: {
            show: !1,
            areaStyle: { color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'] },
          },
        },
        logAxis: {
          axisLine: { show: !1, lineStyle: { color: 'red' } },
          axisTick: { show: !1, lineStyle: { color: '#333' } },
          axisLabel: { show: !1, textStyle: { color: '#333' } },
          splitLine: { show: !1, lineStyle: { color: ['#ccc'] } },
          splitArea: { show: !1, areaStyle: { color: ['red', 'rgba(200,200,200,0.3)'] } },
        },
        timeAxis: {
          axisLine: { show: !1, lineStyle: { color: 'red' } },
          axisTick: { show: !1, lineStyle: { color: '#333' } },
          axisLabel: { show: !1, textStyle: { color: '#333' } },
          splitLine: { show: !1, lineStyle: { color: ['#ccc'] } },
          splitArea: {
            show: !1,
            areaStyle: { color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'] },
          },
        },
        toolbox: {
          iconStyle: { normal: { borderColor: '#999999' }, emphasis: { borderColor: '#666666' } },
        },
        legend: { textStyle: { color: '#333333' } },
        tooltip: {
          axisPointer: {
            lineStyle: { color: '#ccc', width: 1 },
            crossStyle: { color: '#ccc', width: 1 },
          },
        },
        timeline: {
          lineStyle: { color: '#293c55', width: '1' },
          itemStyle: {
            normal: { color: '#293c55', borderWidth: 1 },
            emphasis: { color: '#a9334c' },
          },
          controlStyle: {
            normal: { color: '#293c55', borderColor: '#293c55', borderWidth: 0.5 },
            emphasis: { color: '#293c55', borderColor: '#293c55', borderWidth: 0.5 },
          },
          checkpointStyle: { color: '#2b181c', borderColor: 'rgba(194,53,49, 0.5)' },
          label: {
            normal: { textStyle: { color: '#293c55' } },
            emphasis: { textStyle: { color: '#293c55' } },
          },
        },
        visualMap: { color: ['#1595ff', '#00c7a0', '#f6c041', '#f66d41', '#f641ab', '#a44cf4'] },
        dataZoom: {
          backgroundColor: 'rgba(47,69,84,0)',
          dataBackgroundColor: 'rgba(47,69,84,0.3)',
          fillerColor: 'rgba(167,183,204,0.4)',
          handleColor: '#a7b7cc',
          handleSize: '100%',
          textStyle: { color: '#333' },
        },
        markPoint: {
          label: {
            normal: { textStyle: { color: '#333333' } },
            emphasis: { textStyle: { color: '#333333' } },
          },
        },
      };
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          for (
            var a = Object.assign(
                {
                  centerPosition: ['30%', '50%'],
                  radiusScale: ['50%', '70%'],
                  textPosition: ['29%', '44%'],
                  text: ['', ''],
                  color: '#333',
                  fontSize: 12,
                  subtextFontSize: 12,
                  legendPosition: ['50%', '25%'],
                  legendMaxRowNum: 5,
                  legendFontSize: 12,
                  tooltipConfine: !1,
                  tooltipUnit: '',
                  clickFn: null,
                },
                o
              ),
              l = [],
              n = [],
              c = e.length >= a.legendMaxRowNum ? a.legendMaxRowNum : e.length,
              s = 15 * c + 10 * (c - 1),
              d = 0;
            d < e.length;
            d++
          )
            l.push({
              name: e[d].targetItem,
              icon: 'circle',
            }),
              n.push({ name: e[d].targetItem, value: e[d].actualTarget });
          var u = r.default.init(document.getElementById(t), 'customed'),
            f = Object.assign(
              {
                trigger: 'item',
                confine: a.tooltipConfine,
                formatter: function(e) {
                  var t = a.tooltipUnit;
                  return (
                    parseInt(e.value).toString().length > 4 &&
                      ((e.value = (parseFloat(e.value) / 1e4).toFixed(2)),
                      (t = a.tooltipUnit.indexOf('万') > -1 ? t.replace('万', '亿') : '万' + t)),
                    e.name + '<br>' + e.value + t + ' (' + e.percent + '%)'
                  );
                },
              },
              i.default
            );
          u.setOption({
            title: {
              text: a.text[0],
              subtext: a.text[1],
              left: a.textPosition[0],
              top: a.textPosition[1],
              itemGap: 0,
              textAlign: 'center',
              triggerEvent: !0,
              textStyle: {
                fontWeight: 'bold',
                lineHeight: a.fontSize,
                fontSize: a.fontSize,
                color: a.color,
              },
              subtextStyle: {
                fontWeight: 'bold',
                lineHeight: a.subtextFontSize,
                fontSize: a.subtextFontSize,
                color: a.color,
              },
            },
            tooltip: f,
            legend: {
              left: a.legendPosition[0],
              top: a.legendPosition[1],
              height: s,
              orient: 'vertical',
              selectedMode: !1,
              data: l,
              textStyle: { lineHeight: 15, fontSize: a.legendFontSize },
            },
            series: [
              {
                type: 'pie',
                radius: a.radiusScale,
                center: a.centerPosition,
                avoidLabelOverlap: !1,
                data: n,
                label: { show: !1 },
              },
            ],
          }),
            a.clickFn && u.on('click', a.clickFn);
        });
      var r = a(o(0)),
        i = a(o(1));

      function a(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          var l;
          if (1 === e.length) l = parseFloat(e[0][0].actualTarget);
          else {
            var n = e[0][0].actualTarget,
              c = e[1][0].actualTarget;
            l = (n / c) * 100;
          }
          var s = Object.assign(
              {
                centerPosition: ['50%', '50%'],
                radiusScale: ['50%', '70%'],
                textPosition: ['49%', '44%'],
                text: '',
                color: '#333',
                fontSize: 12,
                subtextFontSize: 12,
                tooltipText: ['', ''],
                clickFn: null,
              },
              o
            ),
            d = r.default.init(document.getElementById(t), 'customed'),
            u = Object.assign(
              {
                trigger: 'item',
                formatter: function(e) {
                  return 0 === e.dataIndex ? s.tooltipText[0] : s.tooltipText[1];
                },
              },
              a.default
            );
          d.setOption({
            title: {
              text: s.text,
              subtext: (0, i.toFixed)(l, 2) + '%',
              left: s.textPosition[0],
              top: s.textPosition[1],
              itemGap: 0,
              textAlign: 'center',
              triggerEvent: !0,
              textStyle: {
                fontWeight: 'bold',
                lineHeight: s.fontSize,
                fontSize: s.fontSize,
                color: s.color,
              },
              subtextStyle: {
                fontWeight: 'bold',
                lineHeight: s.subtextFontSize,
                fontSize: s.subtextFontSize,
                color: s.color,
              },
            },
            tooltip: u,
            series: [
              {
                type: 'pie',
                radius: s.radiusScale,
                center: s.centerPosition,
                avoidLabelOverlap: !1,
                hoverAnimation: !1,
                data: [
                  {
                    name: '',
                    value: l,
                    itemStyle: {
                      color: new r.default.graphic.LinearGradient(0, 0.5, 0.5, 1, [
                        { offset: 0, color: '#DDFF36' },
                        { offset: 1, color: '#00FFA0' },
                      ]),
                    },
                  },
                  { name: '', value: 100 - l, itemStyle: { color: '#000', opacity: 0.5 } },
                ],
                label: { show: !1 },
              },
            ],
          }),
            s.clickFn && d.on('click', s.clickFn);
        });
      var r = l(o(0)),
        i = o(8),
        a = l(o(1));

      function l(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0), (t.toFixed = void 0);
      t.toFixed = function(e, t) {
        var o = Math.pow(10, t),
          r = Math.round(e * o) / o + '';
        if (0 !== t) {
          -1 === r.indexOf('.') && (r += '.');
          for (var i = r.length - r.indexOf('.') - 1, a = 0; a < t - i; a++) r += '0';
        }
        return r;
      };
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          for (
            var a = Object.assign(
                {
                  centerPosition: ['30%', '50%'],
                  radiusScale: ['50%', '70%'],
                  legendPosition: ['50%', '25%'],
                  legendMaxRowNum: 5,
                  legendFontSize: 12,
                  labelLineLength: 10,
                  labelLineLength2: 10,
                  tooltipUnit: '',
                  clickFn: null,
                },
                o
              ),
              l = [],
              n = [],
              c = e.length >= a.legendMaxRowNum ? a.legendMaxRowNum : e.length,
              s = 15 * c + 10 * (c - 1),
              d = 0;
            d < e.length;
            d++
          )
            l.push({
              name: e[d].targetItem,
              icon: 'circle',
            }),
              n.push({ value: e[d].actualTarget, name: e[d].targetItem });
          var u = r.default.init(document.getElementById(t), 'customed'),
            f = Object.assign(
              {
                trigger: 'item',
                formatter: function(e) {
                  var t = a.tooltipUnit;
                  return (
                    parseInt(e.value).toString().length > 4 &&
                      ((e.value = (parseFloat(e.value) / 1e4).toFixed(2)),
                      (t = a.tooltipUnit.indexOf('万') > -1 ? t.replace('万', '亿') : '万' + t)),
                    e.name + '<br>' + e.value + t + ' (' + e.percent + '%)'
                  );
                },
              },
              i.default
            );
          u.setOption({
            tooltip: f,
            legend: {
              left: a.legendPosition[0],
              top: a.legendPosition[1],
              height: s,
              orient: 'vertical',
              selectedMode: !1,
              data: l,
              textStyle: { lineHeight: 15, fontSize: a.legendFontSize },
            },
            series: [
              {
                type: 'pie',
                radius: a.radiusScale,
                center: a.centerPosition,
                avoidLabelOverlap: !0,
                data: n,
                label: { lineHeight: 12, formatter: '{b}：{c} ({d}%)' },
                labelLine: { length: a.labelLineLength, length2: a.labelLineLength2 },
              },
            ],
          }),
            a.clickFn && u.on('click', a.clickFn);
        });
      var r = a(o(0)),
        i = a(o(1));

      function a(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          var l = Object.assign(
              {
                gridLeft: 30,
                gridTop: 60,
                gridRight: 30,
                gridBottom: 30,
                legendTop: 10,
                legendName: [''],
                tooltipUnit: '',
                xAxisFontSize: 12,
                xAxisMaxCharNum: 2,
                xAxisFilter: '',
                yAxisUnit: '',
                yAxisSplitNum: 5,
                dataZoomStyle: [0, 100, !1],
                showPlan: !1,
                clickFn: null,
              },
              o
            ),
            n = [],
            c = [];
          if (l.showPlan) {
            if (e.length > 1) throw '当设置showPlan的值为true时，数组长度不能大于1';
            for (var s = [], d = [], u = 0; u < e[0].length; u++)
              n.push(e[0][u].departmentName.replace(l.xAxisFilter, '')),
                s.push(e[0][u].shouldTarget),
                d.push(e[0][u].actualTarget);
            c.push({
              type: 'bar',
              name: l.legendName[0],
              data: s,
              itemStyle: i.default[0],
              barMaxWidth: 20,
              barCategoryGap: '30%',
            }),
              c.push({
                type: 'bar',
                name: l.legendName[1],
                data: d,
                itemStyle: i.default[1],
                barMaxWidth: 20,
                barCategoryGap: '30%',
              });
          } else
            for (var f = [], g = 0; g < e.length; g++) {
              f.push([]);
              for (var p = 0; p < e[g].length; p++)
                0 == g && n.push(e[g][p].departmentName.replace(l.xAxisFilter, '')),
                  f[g].push(e[g][p].actualTarget);
              c.push({
                type: 'bar',
                name: l.legendName[g],
                data: f[g],
                itemStyle: i.default[g],
                barMaxWidth: 20,
                barCategoryGap: '30%',
              });
            }
          var m = r.default.init(document.getElementById(t), 'customed'),
            h = Object.assign(
              {
                trigger: 'axis',
                formatter: function(e) {
                  for (var t = e[0].name, o = 0; o < e.length; o++) {
                    var r =
                      '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' +
                      e[o].color.colorStops[0].color +
                      ';"></span>';
                    t += '<br>' + r + e[o].seriesName + '：' + e[o].value + l.tooltipUnit;
                  }
                  return t;
                },
              },
              a.default
            );
          m.setOption({
            tooltip: h,
            grid: {
              left: l.gridLeft,
              top: l.gridTop,
              right: l.gridRight,
              bottom: l.gridBottom,
              containLabel: !0,
            },
            legend: { top: l.legendTop, data: l.legendName },
            xAxis: {
              offset: 0,
              data: n,
              axisLabel: {
                lineHeight: l.xAxisFontSize,
                fontSize: l.xAxisFontSize,
                formatter: function(e) {
                  for (
                    var t = '', o = l.xAxisMaxCharNum, r = Math.ceil(e.length / o), i = 0;
                    i < r;
                    i++
                  ) {
                    var a = e.slice(i * o, (i + 1) * o);
                    r - 1 > 0 && (a += '\n'), (t += a);
                  }
                  return t;
                },
              },
            },
            yAxis: {
              type: 'value',
              splitNumber: l.yAxisSplitNum,
              axisLabel: {
                formatter: function(e) {
                  return e + l.yAxisUnit;
                },
              },
            },
            dataZoom: [
              {
                type: 'inside',
                xAxisIndex: 0,
                start: l.dataZoomStyle[0],
                end: l.dataZoomStyle[1],
                zoomOnMouseWheel: !1,
              },
              {
                type: 'slider',
                xAxisIndex: 0,
                start: l.dataZoomStyle[0],
                end: l.dataZoomStyle[1],
                show: l.dataZoomStyle[2],
                zoomLock: !0,
              },
            ],
            series: c,
          }),
            l.clickFn && m.on('click', l.clickFn);
        });
      var r = l(o(0)),
        i = l(o(2)),
        a = l(o(1));

      function l(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          var l = Object.assign(
              {
                gridLeft: 30,
                gridTop: 60,
                gridRight: 30,
                gridBottom: 30,
                legendTop: 10,
                legendName: [''],
                tooltipUnit: '',
                xAxisFontSize: 12,
                xAxisMaxCharNum: 2,
                xAxisFilter: '',
                yAxisUnit: '',
                yAxisSplitNum: 5,
                dataZoomStyle: [0, 100, !1],
                clickFn: null,
              },
              o
            ),
            n = [],
            c = [],
            s = [],
            d = l.legendName[0],
            u = {};
          l.legendName.shift();
          for (var f = 0; f < e.length; f++) {
            s.push([]);
            for (var g = 0; g < e[f].length; g++)
              0 != f
                ? s[f].push(e[f][g].actualTarget)
                : (n.push(e[f][g].departmentName.replace(l.xAxisFilter, '')),
                  (u[e[f][g].departmentName.replace(l.xAxisFilter, '')] = e[f][g].actualTarget));
            0 != f &&
              c.push({
                type: 'bar',
                name: l.legendName[f - 1],
                data: s[f],
                itemStyle: a.default[f - 1],
                barMaxWidth: 20,
                barCategoryGap: '30%',
                stack: '1',
              });
          }
          var p = r.default.init(document.getElementById(t), 'customed'),
            m = Object.assign(
              {
                trigger: 'axis',
                formatter: function(e) {
                  e.unshift({
                    seriesName: d,
                    value: u[e[0].name],
                    color: { colorStops: [{ color: 'white' }] },
                  });
                  for (var t = e[1].name, o = 0; o < e.length; o++) {
                    var r =
                      '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' +
                      e[o].color.colorStops[0].color +
                      ';"></span>';
                    0 === o && (r = ''),
                      (t += '<br>' + r + e[o].seriesName + '：' + e[o].value + l.tooltipUnit);
                  }
                  return t;
                },
              },
              i.default
            );
          p.setOption({
            tooltip: m,
            grid: {
              left: l.gridLeft,
              top: l.gridTop,
              right: l.gridRight,
              bottom: l.gridBottom,
              containLabel: !0,
            },
            legend: { top: l.legendTop, data: l.legendName },
            xAxis: {
              offset: 0,
              data: n,
              axisLabel: {
                lineHeight: l.xAxisFontSize,
                fontSize: l.xAxisFontSize,
                formatter: function(e) {
                  for (
                    var t = '', o = l.xAxisMaxCharNum, r = Math.ceil(e.length / o), i = 0;
                    i < r;
                    i++
                  ) {
                    var a = e.slice(i * o, (i + 1) * o);
                    r - 1 > 0 && (a += '\n'), (t += a);
                  }
                  return t;
                },
              },
            },
            yAxis: {
              type: 'value',
              splitNumber: l.yAxisSplitNum,
              axisLabel: {
                formatter: function(e) {
                  return e + l.yAxisUnit;
                },
              },
            },
            dataZoom: [
              {
                type: 'inside',
                xAxisIndex: 0,
                start: l.dataZoomStyle[0],
                end: l.dataZoomStyle[1],
                zoomOnMouseWheel: !1,
              },
              {
                type: 'slider',
                xAxisIndex: 0,
                start: l.dataZoomStyle[0],
                end: l.dataZoomStyle[1],
                show: l.dataZoomStyle[2],
                zoomLock: !0,
              },
            ],
            series: c,
          });
        });
      var r = l(o(0)),
        i = l(o(1)),
        a = l(o(2));

      function l(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          for (
            var a = Object.assign(
                {
                  gridLeft: 30,
                  gridTop: 30,
                  gridRight: 30,
                  gridBottom: 30,
                  tooltipUnit: '',
                  yAxisUnit: '',
                  yAxisFontSize: 12,
                  yAxisFilter: '',
                  clickFn: null,
                },
                o
              ),
              l = [],
              n = [],
              c = 0;
            c < e[0].length;
            c++
          )
            l.push(e[0][e[0].length - 1 - c].departmentName.replace(a.yAxisFilter, '')),
              n.push(e[0][e[0].length - 1 - c].actualTarget);
          var s = r.default.init(document.getElementById(t), 'customed'),
            d = Object.assign(
              { trigger: 'item', formatter: '{b0}<br>{c0}' + a.tooltipUnit },
              i.default
            );
          s.setOption({
            tooltip: d,
            grid: {
              left: a.gridLeft,
              top: a.gridTop,
              right: a.gridRight,
              bottom: a.gridBottom,
              containLabel: !0,
            },
            xAxis: { type: 'value', show: !1 },
            yAxis: { data: l, axisLabel: { fontSize: a.yAxisFontSize } },
            series: [
              {
                type: 'bar',
                data: n,
                barWidth: 14,
                barGap: 10,
                smooth: !0,
                label: {
                  show: !0,
                  position: 'right',
                  offset: [5, 1],
                  textStyle: { color: '#000', fontSize: 13 },
                  formatter: '{c}' + a.yAxisUnit,
                },
                itemStyle: {
                  color: new r.default.graphic.LinearGradient(0, 0, 0.5, 1, [
                    { offset: 0, color: '#1595ff' },
                    { offset: 1, color: '#12edff' },
                  ]),
                },
              },
            ],
          });
        });
      var r = a(o(0)),
        i = a(o(1));

      function a(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          for (
            var a = Object.assign(
                {
                  gridLeft: 0,
                  gridTop: 60,
                  gridRight: 30,
                  gridBottom: 30,
                  scale: 3,
                  xAxisFontSize: 12,
                  clickFn: null,
                },
                o
              ),
              l = [],
              n = [],
              c = [],
              s = e[0].date.slice(0, 4),
              d = e[0].date.slice(4),
              u = 0;
            u < e.length;
            u++
          ) {
            l.push(e[u].actualTarget), n.push(u * a.scale);
            for (var f = [], g = 0; g < e.length; g++) f[g] = 0;
            (f[u] = 1 * a.scale),
              c.push({
                type: 'bar',
                name: e[u].actualTarget,
                data: f,
                barMaxWidth: 24,
                stack: '1',
                itemStyle: {
                  color: new r.default.graphic.LinearGradient(0, 0, 1, 0, [
                    { offset: 0, color: '#1595FF' },
                    { offset: 1, color: '#12EDFF' },
                  ]),
                },
                label: {
                  show: !0,
                  fontSize: 13,
                  offset: [0, 2],
                  color: '#fff',
                  formatter: function(e) {
                    return e.seriesIndex - 1 == e.dataIndex ? e.name : '';
                  },
                },
              });
          }
          c.unshift({
            type: 'bar',
            name: 'blank',
            data: n,
            barMaxWidth: 24,
            stack: '1',
            itemStyle: { opacity: 0 },
          });
          var p = r.default.init(document.getElementById(t), 'customed'),
            m = Object.assign(
              {
                trigger: 'item',
                formatter: function(e) {
                  if ('blank' == e.seriesName) return '';
                  var t = 1 * s,
                    o = t,
                    r = 1 * d + e.dataIndex * a.scale,
                    i = r + a.scale - 1;
                  return (
                    i > 12 && ((o += 1), (i -= 12), r > 12 && ((t += 1), (r -= 12))),
                    e.name +
                      '<br>' +
                      t +
                      r.toString().replace(/^(\d)$/, '0$1') +
                      '~' +
                      o +
                      i.toString().replace(/^(\d)$/, '0$1')
                  );
                },
              },
              i.default
            );
          p.setOption({
            tooltip: m,
            grid: {
              left: a.gridLeft,
              top: a.gridTop,
              right: a.gridRight,
              bottom: a.gridBottom,
              containLabel: !0,
            },
            xAxis: [
              {
                type: 'value',
                axisLabel: {
                  color: '#666',
                  lineHeight: a.xAxisFontSize,
                  fontSize: a.xAxisFontSize,
                  formatter: function(e) {
                    var t = 1 * s,
                      o = 1 * d + e;
                    return (
                      o > 12 && ((t += 1), (o -= 12)),
                      o.toString().replace(/^(\d)$/, '0$1'),
                      t + '' + o.toString().replace(/^(\d)$/, '0$1')
                    );
                  },
                },
              },
            ],
            yAxis: [{ show: !1, data: l }],
            series: c,
          }),
            a.clickFn && p.on('click', a.clickFn);
        });
      var r = a(o(0)),
        i = a(o(1));

      function a(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          for (
            var a = Object.assign(
                {
                  gridLeft: 30,
                  gridTop: 60,
                  gridRight: 30,
                  gridBottom: 30,
                  legendTop: 10,
                  legendName: [''],
                  tooltipUnit: '',
                  xAxisFontSize: 12,
                  xAxisMaxCharNum: 8,
                  xAxisFilter: '',
                  yAxisUnit: '',
                  yAxisSplitNum: 5,
                  dataZoomStyle: [0, 100, !1],
                  clickFn: null,
                },
                o
              ),
              l = [
                { color: '#15a3ff' },
                { color: '#ff6161' },
                { color: '#4ed552' },
                { color: '#ffc715' },
              ],
              n = [
                {
                  normal: {
                    color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
                      {
                        offset: 0,
                        color: '#15a3ff',
                      },
                      { offset: 1, color: 'rgba(41,197,255,0.20)' },
                    ]),
                    opacity: 0.3,
                  },
                },
                {
                  normal: {
                    color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
                      { offset: 0, color: '#ff6161' },
                      { offset: 1, color: 'rgba(255,97,97,0.25)' },
                    ]),
                    opacity: 0.3,
                  },
                },
                {
                  normal: {
                    color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
                      { offset: 0, color: '#4ed552' },
                      { offset: 1, color: 'rgba(78,213,82,0.20)' },
                    ]),
                    opacity: 0.3,
                  },
                },
                {
                  normal: {
                    color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
                      { offset: 0, color: '#ffc715' },
                      { offset: 1, color: 'rgba(255,199,21,0.20)' },
                    ]),
                    opacity: 0.3,
                  },
                },
              ],
              c = [],
              s = [],
              d = [],
              u = 0;
            u < e.length;
            u++
          ) {
            d.push([]);
            for (var f = 0; f < e[u].length; f++) {
              var g = e[u][f].date;
              5 == g.length && (g = g.slice(0, 4) + '0' + g.slice(4)),
                0 == u && c.push(g.replace(a.xAxisFilter, '')),
                d[u].push(e[u][f].actualTarget);
            }
            s.push({
              type: 'line',
              name: a.legendName[u],
              data: d[u],
              itemStyle: l[u],
              areaStyle: n[u],
            });
          }
          var p = r.default.init(document.getElementById(t), 'customed'),
            m = Object.assign(
              {
                trigger: 'axis',
                axisPointer: {
                  type: 'line',
                  lineStyle: { color: '#ccc', width: 1 },
                  label: { precision: 2 },
                  z: 0,
                },
                formatter: function(e) {
                  for (var t = e[0].name, o = 0; o < e.length; o++)
                    t += '<br>' + e[o].marker + e[o].seriesName + '：' + e[o].value + a.tooltipUnit;
                  return t;
                },
              },
              i.default
            );
          p.setOption({
            tooltip: m,
            grid: {
              left: a.gridLeft,
              top: a.gridTop,
              right: a.gridRight,
              bottom: a.gridBottom,
              containLabel: !0,
            },
            legend: { top: a.legendTop, data: a.legendName },
            xAxis: {
              boundaryGap: !1,
              data: c,
              axisLabel: {
                lineHeight: a.xAxisFontSize,
                fontSize: a.xAxisFontSize,
                formatter: function(e) {
                  for (
                    var t = '', o = a.xAxisMaxCharNum, r = Math.ceil(e.length / o), i = 0;
                    i < r;
                    i++
                  ) {
                    var l = e.slice(i * o, (i + 1) * o);
                    r - 1 > 0 && (l += '\n'), (t += l);
                  }
                  return t;
                },
              },
            },
            yAxis: {
              type: 'value',
              splitNumber: a.yAxisSplitNum,
              axisLabel: {
                formatter: function(e) {
                  return e + a.yAxisUnit;
                },
              },
            },
            dataZoom: [
              {
                type: 'inside',
                xAxisIndex: 0,
                start: a.dataZoomStyle[0],
                end: a.dataZoomStyle[1],
                zoomOnMouseWheel: !1,
              },
              {
                type: 'slider',
                xAxisIndex: 0,
                start: a.dataZoomStyle[0],
                end: a.dataZoomStyle[1],
                show: a.dataZoomStyle[2],
                zoomLock: !0,
              },
            ],
            series: s,
          }),
            a.clickFn && p.on('click', a.clickFn);
        });
      var r = a(o(0)),
        i = a(o(1));

      function a(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          for (
            var a = Object.assign(
                {
                  gridLeft: 30,
                  gridTop: 60,
                  gridRight: 30,
                  gridBottom: 30,
                  legendTop: 10,
                  legendName: ['', ''],
                  tooltipUnit: '',
                  xAxisFontSize: 12,
                  xAxisMaxCharNum: 2,
                  xAxisFilter: '',
                  yAxisUnit: '',
                  dataZoomStyle: [0, 100, !1],
                  clickFn: null,
                },
                o
              ),
              l = [],
              n = [],
              c = [],
              s = [],
              d = 0;
            d < e.length;
            d++
          )
            l.push(e[d].departmentName.replace(a.xAxisFilter, '')),
              n.push(e[d].shouldTarget),
              c.push(e[d].actualTarget);
          s.push({ type: 'line', name: a.legendName[0], data: n, itemStyle: { color: '#4ED552' } }),
            s.push({
              type: 'bar',
              name: a.legendName[1],
              data: c,
              barMaxWidth: 20,
              itemStyle: {
                color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
                  { offset: 0, color: '#1595ff' },
                  { offset: 1, color: '#8c53ca' },
                ]),
              },
            });
          var u = r.default.init(document.getElementById(t), 'customed'),
            f = Object.assign(
              {
                trigger: 'axis',
                axisPointer: {
                  type: 'line',
                  lineStyle: { color: '#ccc', width: 1 },
                  label: { precision: 2 },
                  z: 0,
                },
                formatter: function(e) {
                  for (var t = e[0].name, o = 0; o < e.length; o++) {
                    var r = e[o].color.colorStops ? e[o].color.colorStops[0].color : e[o].color,
                      i =
                        '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' +
                        r +
                        ';"></span>';
                    t += '<br>' + i + e[o].seriesName + '：' + e[o].value + a.tooltipUnit;
                  }
                  return t;
                },
              },
              i.default
            );
          u.setOption({
            tooltip: f,
            grid: {
              left: a.gridLeft,
              top: a.gridTop,
              right: a.gridRight,
              bottom: a.gridBottom,
              containLabel: !0,
            },
            legend: { top: a.legendTop, data: a.legendName },
            xAxis: {
              data: l,
              axisLabel: {
                lineHeight: a.xAxisFontSize,
                fontSize: a.xAxisFontSize,
                formatter: function(e) {
                  for (
                    var t = '', o = a.xAxisMaxCharNum, r = Math.ceil(e.length / o), i = 0;
                    i < r;
                    i++
                  ) {
                    var l = e.slice(i * o, (i + 1) * o);
                    r - 1 > 0 && (l += '\n'), (t += l);
                  }
                  return t;
                },
              },
            },
            yAxis: {
              type: 'value',
              splitNumber: a.yAxisSplitNum,
              axisLabel: {
                formatter: function(e) {
                  return e + a.yAxisUnit;
                },
              },
            },
            dataZoom: [
              {
                type: 'inside',
                xAxisIndex: 0,
                start: a.dataZoomStyle[0],
                end: a.dataZoomStyle[1],
                zoomOnMouseWheel: !1,
              },
              {
                type: 'slider',
                xAxisIndex: 0,
                start: a.dataZoomStyle[0],
                end: a.dataZoomStyle[1],
                show: a.dataZoomStyle[2],
                zoomLock: !0,
              },
            ],
            series: s,
          }),
            a.clickFn && u.on('click', a.clickFn);
        });
      var r = a(o(0)),
        i = a(o(1));

      function a(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e, t, o) {
      'use strict';
      (t.__esModule = !0),
        (t.default = function(e, t, o) {
          for (
            var a = Object.assign(
                {
                  gridLeft: 30,
                  gridTop: 60,
                  gridRight: 30,
                  gridBottom: 30,
                  legendTop: 10,
                  legendName: ['', '', ''],
                  tooltipUnit: '',
                  xAxisFontSize: 12,
                  xAxisMaxCharNum: 2,
                  xAxisFilter: '',
                  yAxisUnit: '',
                  yAxisSplitNum: 5,
                  dataZoomStyle: [0, 100, !1],
                  showPlan: !1,
                  clickFn: null,
                },
                o
              ),
              l = [],
              n = [],
              c = [],
              s = [],
              d = [],
              u = 0;
            u < e[0].length;
            u++
          )
            l.push(e[0][u].departmentName.replace(a.xAxisFilter, '')), n.push(e[0][u].actualTarget);
          d.push({
            type: 'bar',
            name: a.legendName[0],
            data: n,
            barMaxWidth: 20,
            itemStyle: {
              color: new r.default.graphic.LinearGradient(0, 0, 0, 1, [
                { offset: 0, color: '#1595ff' },
                { offset: 1, color: '#8c53ca' },
              ]),
            },
          });
          for (var f = 0; f < e[1].length; f++) c.push(e[1][f].actualTarget);
          d.push({ type: 'line', name: a.legendName[1], data: c, itemStyle: { color: '#4ED552' } });
          for (var g = 0; g < e[2].length; g++) s.push(e[2][g].actualTarget);
          d.push({ type: 'line', name: a.legendName[2], data: s, itemStyle: { color: '#ff6161' } });
          var p = r.default.init(document.getElementById(t), 'customed'),
            m = Object.assign(
              {
                trigger: 'axis',
                axisPointer: {
                  type: 'line',
                  lineStyle: { color: '#ccc', width: 1 },
                  label: { precision: 2 },
                  z: 0,
                },
                formatter: function(e) {
                  for (var t = e[0].name, o = 0; o < e.length; o++) {
                    var r = e[o].color.colorStops ? e[o].color.colorStops[0].color : e[o].color,
                      i =
                        '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' +
                        r +
                        ';"></span>';
                    t += '<br>' + i + e[o].seriesName + '：' + e[o].value + a.tooltipUnit;
                  }
                  return t;
                },
              },
              i.default
            );
          p.setOption({
            tooltip: m,
            grid: {
              left: a.gridLeft,
              top: a.gridTop,
              right: a.gridRight,
              bottom: a.gridBottom,
              containLabel: !0,
            },
            legend: { top: a.legendTop, data: a.legendName },
            xAxis: {
              data: l,
              axisLabel: {
                lineHeight: a.xAxisFontSize,
                fontSize: a.xAxisFontSize,
                formatter: function(e) {
                  for (
                    var t = '', o = a.xAxisMaxCharNum, r = Math.ceil(e.length / o), i = 0;
                    i < r;
                    i++
                  ) {
                    var l = e.slice(i * o, (i + 1) * o);
                    r - 1 > 0 && (l += '\n'), (t += l);
                  }
                  return t;
                },
              },
            },
            yAxis: {
              type: 'value',
              splitNumber: a.yAxisSplitNum,
              axisLabel: {
                formatter: function(e) {
                  return e + a.yAxisUnit;
                },
              },
            },
            series: d,
          });
        });
      var r = a(o(0)),
        i = a(o(1));

      function a(e) {
        return e && e.__esModule ? e : { default: e };
      }
    },
    function(e) {
      e.exports = {
        name: 'ns-charts',
        version: '1.0.0',
        description: 'charts for newsee project',
        author: 'BroccoliSpring <Lensgcx@163.com>',
        license: 'ISC',
        main: 'index.js',
        scripts: { build: 'cross-env NODE_ENV=production node build/run.build.js' },
        repository: { type: 'git', url: 'git+https://github.com/Newsee-Frontend/ns-charts.git' },
        bugs: { url: 'https://github.com/Newsee-Frontend/ns-charts/issues' },
        homepage: 'https://github.com/Newsee-Frontend/ns-charts#readme',
        dependencies: { echarts: '^4.2.1', jquery: '1.11.2' },
        devDependencies: {
          '@babel/core': '^7.2.2',
          '@babel/preset-env': '^7.3.1',
          'fs-extra': '^7.0.1',
          gulp: '^3.9.1',
          'gulp-babel': '^6.1.1',
          'gulp-clean': '^0.4.0',
          'gulp-notify': '^3.2.0',
          'gulp-rename': '^1.4.0',
          'gulp-replace': '^1.0.0',
          'gulp-uglify': '^3.0.1',
          'gulp-util': '^3.0.8',
          'babel-loader': '^8.0.5',
          webpack: '4.16.5',
          'webpack-cli': '3.1.0',
          ora: '^1.2.0',
          chalk: '2.4.1',
          'cross-env': '5.2.0',
        },
      };
    },
  ]);
});
