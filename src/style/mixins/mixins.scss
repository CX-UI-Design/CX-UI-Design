@import 'function.scss';

/* BEM
 -------------------------- */
@mixin b($block) {
  $B: $namespace + '-' + $block !global;

  .#{$B} {
    @content;
  }
}

@mixin rb($block) {
  $B: $namespace + '-' + $block !global;

  &.#{$B} {
    @content;
  }
}

@mixin rbm($blocks) {
  $B: '';

  @each $block in $blocks {
    $B: $B + '.' + $namespace + '-' + $block;
  }

  &#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + $element-separator + $unit + ','};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

/**
 *  element separator to link
 */
@mixin es2link($name) {
  &#{$element-separator + $name} {
    @content;
  }
}

/**
 *  modifier separator to link
 */
@mixin ms2link($name) {
  &#{$modifier-separator + $name} {
    @content;
  }
}

@mixin size-inherit {
  width: inherit;
  height: inherit;
  line-height: inherit;
  min-height: inherit;
}
